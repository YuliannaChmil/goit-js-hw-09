{"mappings":"iiBAAA,IAQIA,EARJC,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,kBACnCC,UAAWF,SAASC,cAAc,iBAClCE,YAAaH,SAASC,cAAc,mBACpCG,UAAWJ,SAASC,cAAc,WAiCpC,SAASI,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEK,SAAAR,EAAUC,UAEpBG,EAAO,CAAEI,SAAAR,EAAUC,S,GAEpBA,E,IAtCPT,EAAKM,UAAUW,iBAAiB,SAEhC,SAA4BC,GAC1BA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOrB,EAAKC,WAAWqB,OAC/BC,EAAOF,OAAOrB,EAAKI,UAAUkB,OAC7BE,EAASH,OAAOrB,EAAKK,YAAYiB,OAErC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrC,OAAOC,EAAA3B,GAAS4B,OAAOC,QAAQ,2BAGjC,IAAK9B,EAAW,EAAGA,GAAY2B,EAAQ3B,GAAY,EACjDU,EAAcV,EAAUuB,GACrBQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARb,SAAUP,EAAKoB,EAALpB,MACjBgB,EAAA3B,GAAS4B,OAAOK,QACd,uBAAwCC,OAAfF,EAAS,QAAYE,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAJ,G,IAAGK,EAAQL,EAARb,SAAUP,EAAKoB,EAALpB,MAClBgB,EAAA3B,GAAS4B,OAAOS,QACd,sBAAqCH,OAAfE,EAAS,QAAYF,OAANvB,EAAM,M,IAGjDW,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('[name=\"delay\"]'),\n  inputStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('button'),\n};\nlet position;\n\nrefs.submitBtn.addEventListener('click', onCreatePromiseBtn);\n\nfunction onCreatePromiseBtn(event) {\n  event.preventDefault();\n\n  let delay = Number(refs.inputDelay.value);\n  let step = Number(refs.inputStep.value);\n  let amount = Number(refs.inputAmount.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    return Notiflix.Notify.warning('Enter a positive value!');\n  }\n\n  for (position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$ce04d3a99e08e73b$var$position","$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","submitBtn","$ce04d3a99e08e73b$var$createPromise","position3","delay","Promise","resolve","reject","setTimeout","Math","random","position","addEventListener","event","preventDefault","delay1","Number","value","step","amount","$parcel$interopDefault","Notify","warning","then","param","position1","success","concat","catch","position2","failure"],"version":3,"file":"03-promises.96bbf339.js.map"}