{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,kBACnCC,UAAWF,SAASC,cAAc,iBAClCE,YAAaH,SAASC,cAAc,mBACpCG,UAAWJ,SAASC,cAAc,WAEpC,IAAII,EA+BJ,SAASC,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEK,SAAAR,E,MAAUC,IAEpBG,EAAO,CAAEI,SAAAR,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAtCbV,EAAKM,UAAUY,iBAAiB,SAEhC,SAA4BC,GAC1BA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOtB,EAAKC,WAAWsB,OAC/BC,EAAOF,OAAOtB,EAAKI,UAAUmB,OAC7BE,EAASH,OAAOtB,EAAKK,YAAYkB,OAErC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrC,OAAOC,EAAA5B,GAAS6B,OAAOC,QAAQ,2BAGjC,IAAKrB,EAAW,EAAGA,GAAYkB,EAAQlB,GAAY,EACjDC,EAAcD,EAAUc,GACrBQ,MAAK,EAAGZ,SAAAa,EAAQpB,MAAEA,MACjBgB,EAAA5B,GAAS6B,OAAOI,QACd,uBAAqBD,QAAiBpB,MAAU,IAGnDsB,OAAM,EAAGf,SAAAgB,EAAQvB,MAAEA,MAClBgB,EAAA5B,GAAS6B,OAAOO,QACd,sBAAoBD,QAAevB,MAAU,IAGnDW,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('[name=\"delay\"]'),\n  inputStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('button'),\n};\nlet position;\n\nrefs.submitBtn.addEventListener('click', onCreatePromiseBtn);\n\nfunction onCreatePromiseBtn(event) {\n  event.preventDefault();\n\n  let delay = Number(refs.inputDelay.value);\n  let step = Number(refs.inputStep.value);\n  let amount = Number(refs.inputAmount.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    return Notiflix.Notify.warning('Enter a positive value!');\n  }\n\n  for (position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","submitBtn","$47d4ff9957288465$var$position","$47d4ff9957288465$var$createPromise","position3","delay","Promise","resolve","reject","setTimeout","Math","random","position","addEventListener","event","preventDefault","delay1","Number","value","step","amount","$parcel$interopDefault","Notify","warning","then","position1","success","catch","position2","failure"],"version":3,"file":"03-promises.07bddb9b.js.map"}